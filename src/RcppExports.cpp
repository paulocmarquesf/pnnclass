// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_p_r
double log_p_r(double beta_r, int A_r, IntegerVector C_r, int L);
RcppExport SEXP _pnnclass_log_p_r(SEXP beta_rSEXP, SEXP A_rSEXP, SEXP C_rSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type beta_r(beta_rSEXP);
    Rcpp::traits::input_parameter< int >::type A_r(A_rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type C_r(C_rSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(log_p_r(beta_r, A_r, C_r, L));
    return rcpp_result_gen;
END_RCPP
}
// data_topology
List data_topology(NumericMatrix X_trn, IntegerVector y_trn, std::string distance);
RcppExport SEXP _pnnclass_data_topology(SEXP X_trnSEXP, SEXP y_trnSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_trn(X_trnSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_trn(y_trnSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(data_topology(X_trn, y_trn, distance));
    return rcpp_result_gen;
END_RCPP
}
// loocv
List loocv(List dt, NumericVector beta_hat);
RcppExport SEXP _pnnclass_loocv(SEXP dtSEXP, SEXP beta_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_hat(beta_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(loocv(dt, beta_hat));
    return rcpp_result_gen;
END_RCPP
}
// predict_test
List predict_test(List model, NumericMatrix X_tst);
RcppExport SEXP _pnnclass_predict_test(SEXP modelSEXP, SEXP X_tstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_tst(X_tstSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_test(model, X_tst));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pnnclass_log_p_r", (DL_FUNC) &_pnnclass_log_p_r, 4},
    {"_pnnclass_data_topology", (DL_FUNC) &_pnnclass_data_topology, 3},
    {"_pnnclass_loocv", (DL_FUNC) &_pnnclass_loocv, 2},
    {"_pnnclass_predict_test", (DL_FUNC) &_pnnclass_predict_test, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_pnnclass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
